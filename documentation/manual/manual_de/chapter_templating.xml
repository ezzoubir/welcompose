<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
    "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="templating">
	<title>Vorlagen</title>
	
	<sect1 id="templating.introduction">
		<title>Einführung</title>
		
		<para>
			Die Vorlagen dienen in Welcompose dazu, das Aussehen der
			Ausgabeseiten zu gestalten. Der Anwender behält dabei volle
			Kontrolle über die Ausgabe, so dass der ausgegebene Code komplett
			von ihm bestimmt werden kann. Auf diese Weise wird die
			Realisierung von tabellenfreien Layouts und barrierefreien Seiten
			von Welcompose nicht behindert. 
		</para>
		
		<para>
			Alle Vorlagen, CSS-Dateien und Bilder werden übers Web verwaltet,
			also über die Administrationsoberfläche. Auf diese Weise wird
			unter anderem die Verwendung von einer Vorlage pro Einzelseite
			ermöglicht. 
		</para>
		
		<para>
			Zur Verarbeitung der Vorlagen dient die populäre Bibliothek
			Smarty<footnote>
			<para>
				<ulink type="external" url="http://smarty.php.net"/>
			</para>
			</footnote>. Sie bietet eine Vielzahl von Funktionen, mit deren
			Hilfe die Erstellung von Vorlagen in Welcompose nicht allzu 
			schwer fallen sollte. Zudem ist es möglich, von den Vorlagen aus
			auf die internen APIs von Welcompose zuzugreifen und auf diese
			Weise die Daten, die man benötigt, nachzuladen. So bietet
			Welcompose eine grössere Flexibilität, ohne dass der Ursprungscode
			modifiziert werden muss.
		</para>
		
		<tip>
			<para>
				Wer mit Smarty noch nicht vertraut ist, dem bietet der
				Abschnitt <emphasis>Smarty for Template Designers</emphasis><footnote>
				<para>
					<ulink type="external" url="http://smarty.php.net/manual/en/smarty.for.designers.php"/>
				</para>
				</footnote> aus der der Smarty-Dokumentation einen guten
				Einstieg. 
			</para>
		</tip>
		
	</sect1>
	
	<sect1 id="templating.functionality">
		<title>Funktionsweise des Vorlagensystems</title>
		
		<note>
			<para>
				Dieses Kapitel beschreibt nur die Vorlagen ohne die
				Spezialfälle Globale Dateien (siehe <xref
				linkend="templating.global_files"/>) und
				Globale Vorlagen (siehe <xref
				linkend="templating.global_templates"/>).
			</para>
		</note>
		
		<para>
			Da die Vorlagen von Welcompose in der Datenbank gespeichert
			werden, unterscheidet sich das Welcompose-Vorlagensystem
			in einigen Punkten von normalen Vorlagensystemen, wie man
			sie von anderen Content Management Systemen kennt.
			Kurz gesagt:
		</para>
		
		<itemizedlist>
			<listitem>
				<para>
					Statt Dateien auf der Festplatte, die mit einem
					Editor und FTP bearbeitet werden, sind Vorlagen
					Datensätze in der Datenbank, die über das
					Webinterface bearbeitet werden. 
				</para>
			</listitem>
			<listitem>
				<para>
					Die Dateinamen der Vorlagen wurden durch
					Vorlagentypen ersetzt. Die Vorlagentypen
					definieren nun, welche Vorlage für welche Ansicht
					verwendet wird.
				</para>
			</listitem>
			<listitem>
				<para>
					Statt Verzeichnissen mit Vorlagen für verschiedene
					Seiten gibt es Vorlagengruppen, die im Adminbereich
					zusammengeklickt und mehreren Seiten gleichzeitig
					zugewiesen werden können.
				</para>
			</listitem>
		</itemizedlist>
		
		<para>
			Dies macht das Vorlagensystem leider an einigen Stellen etwas
			komplexer, bringt an anderen Stellen dafür eine einfachere
			Bedienung und vor allem mehr Flexibilität. 
		</para>
		
		<para>
			Grundsätzlich wird für jede Art von Seite eine Vorlage erstellt,
			die über das Web gespeichert und modifiziert werden kann (siehe
			<xref linkend="templating.templates.manage_templates"/>). 
			So hat man unter anderem eine Vorlage für normale Inhaltsseiten,
			eine Vorlage für die Startseite eines oder mehrerer Blogs oder
			für die E-Mails, die von den Formularen versendet werden. Anstatt
			der eigentlichen Inhalte werden Platzhalter gesetzt, die
			Welcompose beim Aufbereiten der Seite wiederum durch die
			jeweiligen Inhalte ersetzt (siehe <xref
			linkend="templating.templates.usage"/>). Vorlagen lassen sich auch
			aufteilen und beispielsweise von mehreren Vorlagen genutzte Teile
			in gesonderten Vorlagen auslagern, die in die verschiedenen
			Vorlagen beim Laden einer Seite wieder eingesetzt werden (siehe
			<xref linkend="templating.template_types.usage.include_templates"/>). 
		</para>
		
		<para>
			Die Vorlagen werden nicht direkt den jeweiligen Seiten zugewiesen.
			Das bedeutet, man kann Welcompose nicht einfach anweisen, direkt
			eine bestimmte Vorlage für eine Seite zu verwenden. Statt dessen
			kommen Vorlagengruppen (siehe <xref
			linkend="templating.template_sets"/>) und Vorlagentypen (siehe
			<xref linkend="templating.template_types"/>) zum Einsatz.
		</para>
		
		<para>
			Die <emphasis role="bold">Vorlagengruppen</emphasis> dienen dazu, 
			die Vorlagen zu gruppieren. Hat man beispielsweise eine
			Vorlagengruppe mit dem Namen
			<userinput>Standardvorlagen</userinput>, kann man dieser eine
			oder mehrere Vorlagen zuweisen. Dieser Vorlagengruppe wird wiederum
			eine Seite zugewiesen wird, was bedeutet, dass die Seite in
			Zukunft nur Vorlagen aus diesem Vorlagengruppe verwendet.
		</para>
		
		<para>
			Dieses Konstrukt ist nötig, da einzelne Seiten, beispielsweise
			ein Blog, über mehrere Ansichten verfügen, die alle eine eigene
			Vorlagen benötigen, und nur so mehrere Vorlagen einer Seite
			zugeordnet werden können. 
		</para>
		
		<para>
			Damit Welcompose weiss, welche Vorlage es für welche Seite
			respektive Ansicht aus einem Vorlagengruppe auswählen muss, 
			kommen die <emphasis role="bold">Vorlagentypen</emphasis> zum
			Einsatz. Sie definieren, für welchen Zweck respektive Ansicht eine
			Vorlage geeignet ist. So wird die Vorlage zur Darstellung eines
			Formulars auch wirklich zur Darstellung eines Formulars und nicht
			einer Inhaltsseite verwendet. Und da pro Vorlagengruppe nur jeweils
			eine Vorlage mit einem bestimmten Typ erlaubt ist, kommt es auch
			zu keinem Durcheinander, dass Welcompose auf einmal nicht
			entscheiden kann, welche der verschiedenen Vorlagen mit dem
			gleichen Typ gewählt werden soll. 
		</para>
		
		<para>
			Der Ablauf, wenn Welcompose zur Aufbereitung einer Seite eine
			Vorlage auswählt, ist nun immer gleich. Da bekannt ist,
			welche Seite aufgerufen werden soll, weiss Welcompose, welcher
			Vorlagengruppe mit der Seite verbunden ist und welcher Vorlagen-Typ
			zur Darstellung dieser Seite benötigt wird. Also schaut Welcompose
			in der entsprechenden Vorlagengruppe nach, ob eine Vorlage des
			gewünschten Typs vorhanden ist. Wenn ja, wird diese zur
			Aufbereitung der Seite verwendet. Wenn nicht, wird ein Fehler
			angezeigt. 
		</para>
		
		<para>
			Wie man sich dieses Prinzip zu Nutze machen kann, um beispielsweise
			Vorlagen schnell und einfach zu wechseln oder für verschiedene
			Seiten verschiedene Designs zu haben, zeigen die
			Anwendungsbeispiele, die in den Kapiteln zu Vorlagen,
			Vorlagengruppenn und Vorlagentypen enthalten sind.
		</para>
	</sect1>
	
	<sect1 id="templating.templates">
		<title>Seitenvorlagen</title>
		
		<sect2 id="templating.templates.introduction">
			<title>Einführung</title>
			
			<para>
				Die Vorlagen dienen in Welcompose zur Gestaltung respektive
				Aufbereitung der einzelnen Seiten. Sie werden in Form von
				normalen HTML-Dateien hinterlegt, bei denen die Inhalte, die
				mit Welcompose verwaltet werden sollen, durch Platzhalter
				ersetzt werden. Diese werden wiederum von Welcompose beim
				Seitenaufruf mit den jeweiligen Inhalten vertauscht.
				Selbstverständlich ist man nicht nur auf HTML begrenzt und
				kann jede Markup-Sprache verwenden, die man benötigt &ndash;
				oder sogar nur nackten Text.
			</para>
			
			<note>
				<para>
					Zur Speicherung von CSS- oder JavaScript-Dateien kommen nicht
					die normalen Vorlagen, sondern die globalen Vorlagen (siehe
					<xref linkend="templating.global_templates"/>) zum Einsatz.
					Um Bilder und andere binäre Objekte kümmern sich die globalen
					Dateien (siehe <xref linkend="templating.global_files"/>).
				</para>
			</note>
		</sect2>
		
		<sect2 id="templating.templates.manage_templates">
			<title>Vorlagen verwalten</title>
			
			<para>
				Die Verwaltung der Vorlagen erfolgt im Bereich
				<guimenu>Vorlagen</guimenu> im Unterpunkt
				<guisubmenu>Seitenvorlagen</guisubmenu>. Die Übersicht listet die
				vorhandenen Vorlagen zusammen mit dem Namen, dem jeweiligen
				Typ und einer allenfalls vorhandenen Beschreibung. Eine
				Filterung der angezeigten Vorlagen ist anhand des
				Vorlagentypen- und Gruppen möglich. Dazu werden eine Reihe von
				Funktionen zur Bearbeitung von Vorlagen geboten:
			</para>
			
			<figure id="templating.templates.manage_templates.overview">
				<title>Übersicht über vorhandene Vorlagen</title>
				<graphic fileref="images/templating/templates/manage_templates.overview.png"/>
			</figure>
			
			<variablelist>
				<varlistentry>
					<term><guimenuitem>Upload</guimenuitem></term>
					<listitem>
						<para>
							Ermöglicht das Hochladen einer Vorlage, wobei mit 
							dem Dateiinhalt der hochgeladenen Datei die auf
							dem Server hinterlegte Vorlage ersetzt wird. 
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Download</guimenuitem></term>
					<listitem>
						<para>
							Erlaubt den Download der Vorlage als Datei. 
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Duplizieren</guimenuitem></term>
					<listitem>
						<para>
							Mit dieser Funktion ist es möglich, die jeweilige
							Vorlage zu duplizieren und unter einem anderen
							Namen, Typ oder auch Inhalt zu speichern. So kann
							man Zeit beim Erstellen der Vorlagen sparen, wenn
							sich zwei Vorlagen nur wenig unterscheiden. 
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Bearbeiten</guimenuitem></term>
					<listitem>
						<para>
							Über die Schaltfläche <guibutton>Edit</guibutton>
							gelangt man zu einem Formular zum Bearbeiten der
							jeweiligen Vorlage.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Löschen</guimenuitem></term>
					<listitem>
						<para>
							Löscht die Vorlage.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			
			<para>
				Sobald man auf den Link <guibutton>Neu anlegen</guibutton> klickt,
				kommt man zum Formular zum Hinzufügen einer neuen Vorlage.
			</para>
			
			<figure id="templating.templates.manage_templates.add_new">
				<title>Vorlage hinzufügen</title>
				<graphic fileref="images/templating/templates/manage_templates.add_new.png"/>
			</figure>
			
			<variablelist>
				<varlistentry>
					<term><guimenuitem>Typ</guimenuitem></term>
					<listitem>
						<para>
							Der Vorlagen-Typ, den die neue Vorlage erhalten
							soll. Bestimmt, für welche Arten von Seiten
							die Vorlage eingesetzt werden soll. Achten Sie
							dabei darauf, dass innerhalb einer Vorlagengruppe
							für jeden Vorlagen-Typ nur eine Vorlage existieren
							kann.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Name</guimenuitem></term>
					<listitem>
						<para>
							Der Name der Vorlage. Kann frei gewählt werden.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Beschreibung</guimenuitem></term>
					<listitem>
						<para>
							Beschreibung der Vorlage. Kann frei gewählt
							werden und soll beim Wiederfinden der Vorlage
							helfen.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Inhalt</guimenuitem></term>
					<listitem>
						<para>
							Der eigentliche Inhalt der Vorlage. Hier kann
							der (X)HTML-Code eingefügt werden. Links zu
							anderen Seiten, Globalen Vorlagen und einigen
							anderen Strukturelementen können über die
							Hilftsfunktionen oberhalb des Inhaltsbereichs
							eingefügt werden.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Vorlagengruppen</guimenuitem></term>
					<listitem>
						<para>
							Vorlagengruppen, denen die Vorlage zugeordnet werden
							soll. Es kann entweder keine, eine oder mehrere
							Vorlagengruppen ausgewählt werden. Die Vorlage ist
							aber nur aktiv, wenn sie mindestens einer
							Vorlagengruppe zugewiesen wird. 
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			
			<note>
				<para>
					Über der Textarea stehen Links zur Verfügung, die über ein Pop-up unterschiedliche
					Dateien des Systems referenzieren die Ihnen die Gestaltung der Seitenvorlagen
					erleichtern. Details über Funktion und Anwendung der einzelnen Links finden sie
					in den jeweiligen inhaltlichen Kapiteln.
				</para>
			</note>
			
			
		</sect2>

		<sect2 id="templating.templates.usage">
			<title>Anwendung</title>

			<sect3 id="templating.templates.usage.introduction">
				<title>Einführung</title>

				<para>
					Bei den meisten Software steht für jede Vorlage eine bestimmte
					Menge von Daten respektive Platzhaltern zur Verfügung, die man 
					verwenden kann oder nicht. Braucht man mehr Daten, als
					Software-seitig vorgesehen sind, geht dies meist nicht oder ist
					nur schwer zu bewerkstelligen. Umgekehrt werden, wenn weniger
					Daten benötigt werden, unnötig Daten geladen, was die Software
					langsamer macht. 
				</para>

				<para>
					Um mehr Flexibilität zu gewährleisten, geht Welcompose einen
					anderen Weg:
				</para>

				<itemizedlist>
					<listitem>
						<para>
							Es wird standardmässig nur ein Minimum an Daten
							geladen.
						</para>
					</listitem>
					<listitem>
						<para>
							Werden weitere Daten benötigt, können diese nach
							Bedarf nachgeladen werden.
						</para>
					</listitem>
				</itemizedlist>

				<para>
					Der Nachteil dieser Methode ist, dass das Nachladen der 
					Daten ein wenig komplizierter als das simple Einsetzen der
					Platzhalter ist. Mit den Erklärungen in den nächsten
					Abschnitten sollte dies aber keine unnötig hohe Hürde bedeuten.
				</para>

			</sect3>

			<sect3 id="templating.templates.usage.display_assigned_data">
				<title>Vorhandene Daten auslesen</title>

				<para>
					Wie bereits gesagt, bringt Welcompose immer ein Minimum an
					Daten pro Seite mit. Beispielsweise die gesamten Metadaten
					der aktuellen Seite, da sie ohnehin beim Verarbeiten der
					Anfrage, wenn Welcompose ermittelt, welche Seite überhaupt
					angefordert wird, bereits geladen wurden.
				</para>

				<para>
					Um herauszufinden, wie die Variablen für den Zugriff auf
					die Metadaten heissen, könnte man entweder den PHP-Code lesen,
					der die Daten zusammenstellt, oder im Handbuch hier nach
					einer Liste der Variablen suchen &ndash; tun Sie's nicht,
					selbst wenn mittlerweile so eine existiert. Denn die Daten
					dort werden entweder nicht aktuell oder aus anderen Gründen
					unvollständig sein.
				</para>
				
			</sect3>
				
			<sect3 id="templating.templates.usage.console">
				<title>Die Smarty Debug Konsole</title>

				<para>
					Die aktuellen Informationen für die jeweilige Seite bringt
					nämlich Welcompose direkt selber mit, respektive die
					Bibliothek zur Verarbeitung der Vorlagen. Diese verfügt
					nämlich über eine <emphasis role="bold">Debug-Konsole</emphasis>, welche die vorhandenen
					Variablen und die ihnen aktuell zugewiesenen Daten
					auflistet.
				</para>

				<para>
					Auf diese Weise kann man dort die benötigten Daten finden
					und direkt die richtigen Platzhalter in die Vorlage einsetzen.
				</para>
			
			<tip>
				<para>
					Die Smarty Debug Konsole  ist DAS zentrale Mittel, um die tatsächlich
					der Vorlage zur Verfügung stehenden Variablen und die ihnen
					aktuell zugewiesenen Werte anzeigen zu lassen.
				</para>
			</tip>

				<para>
					Die Funktionsweise der Debug-Konsole soll an einem einfachen
					Beispiel illustriert werden. Dazu muss eine Vorlagengruppe
					(siehe <xref linkend="templating.template_sets"/>)angelegt werden,
					beispielsweise <userinput>test</userinput>
					und mit einer Seite des Typs
					<userinput>WCOM_SIMPLE_PAGE</userinput> (siehe
					<xref linkend="contents.pages"/>) verbunden werden,
					die mit ein wenig Inhalt befüllt sein sollte.
				</para>

				<para>
					Nun muss man eine Vorlage des Typs 
					<guimenuitem>simple_page_index</guimenuitem> mit einem
					beliebigen Namen erstellen, beispielsweise <userinput>Vorlage
					für Inhaltsseiten</userinput>. In den Inhaltsbereich der
					Vorlage kann man einen Dummy-Text wie 
					<userinput>Hallo Welt</userinput> eingeben. Als Vorlagegruppe
					muss die soeben erstellte Gruppe ausgewählt werden,
					dem Beispiel gemäss also <guimenuitem>test</guimenuitem>.
				</para>

				<figure id="templating.templates.usage.display_assigned_data.hello_world_template">
					<title>"Hallo-Welt"-Vorlage</title>
					<graphic fileref="images/templating/templates/usage.display_assigned_data.hello_world_template.png"/>
				</figure>

				<para>
					Hat man dies erledigt, kann man die Seite aufrufen und sollte
					<computeroutput>Hallo Welt</computeroutput> zu Gesicht
					bekommen.
				</para>

				<para>
					Nun kann man den Dummy-Text aus der Vorlage entfernen und
					statt dessen den Befehl zur Ausgabe der Debug-Konsole
					einfügen:
				</para>

				<programlisting><![CDATA[
{debug}
]]></programlisting>

				<para>
					Sobald man die Vorlage gespeichert hat und die Ausgabeseite
					aktualisiert, sollte ein Pop-up mit der Smarty Debug Console
					erscheinen (gegebenenfalls muss vorab der Pop-up-Blocker
					deaktiviert werden).
				</para>

				<figure id="templating.templates.usage.display_assigned_data.debug_pop_up">
					<title>Smarty Debug Konsole</title>
					<graphic fileref="images/templating/templates/usage.display_assigned_data.debug_pop_up.png"/>
				</figure>

				<para>
					Im Abschnitt <computeroutput>Assigned Template
					Variables</computeroutput> listet die Smarty Debug Console
					die bis zum Aufruf von <code>{debug}</code> der Vorlage
					zugewiesenen Variablen (links, <varname>{$page}</varname> usw.)
					inklusive ihrer aktuellen Inhalte (rechts, grüne Schrift).
				</para>

				<para>
					Die Variablennamen sind dabei direkt in der Form notiert, wie
					sie als Platzhalter in die Vorlagen eingesetzt werden müssen.
					Würde man beispielsweise in die aktuelle Vorlage, wo jetzt
					<code>{debug}</code> steht,
					<varname>{$SCRIPT_NAME}</varname> oder
					<varname>{$action}</varname> schreiben und die Seite dann
					neu laden, würden <varname>{$SCRIPT_NAME}</varname> und 
					<varname>{$action}</varname> durch ihre aktuellen Werte
					<computeroutput>/welcompose/trunk/welcompose</computeroutput>
					und <computeroutput>Index</computeroutput> ersetzt werden.
				</para>

				<para>
					Wer nun das Gleiche mit <varname>{$get}</varname> oder
					<varname>{$page}</varname> machen würde, erhält als Ergebnis
					<computeroutput>Array</computeroutput>. Dies ist korrekt, da
					es sich bei den beiden Variablen nicht um simple Zeichenketten
					wie <varname>{$SCRIPT_NAME}</varname> oder
					<varname>{$action}</varname> handelt, sondern um Arrays,
					also Variablen, in denen mehrere weitere Variablen gespeichert
					werden. 
				</para>

				<para>
					Dies erkennt man daran, dass die Smarty Debug Console bei
					<varname>{$get}</varname> rechts in der ersten Zeile mit
					<computeroutput>Array (8)</computeroutput> signalisiert, 
					dass es sich eben um einen Array mit 8 sogenannten Elementen,
					also in ihm gespeicherte Variablen handelt. Die Elemente
					bestehen einerseits aus ihrem Namen (auch Schlüssel genannt),
					der links vom Pfeil <code><![CDATA[=>]]></code> steht, und
					einem Wert rechts vom Pfeil (der wiederum ein Array sein kann). 
				</para>

				<para>
					Um auf ein Array-Element zuzugreifen, muss man den
					Variablennamen um den Elementnamen erweitern, die beide
					durch einen Punkt (<code>.</code>) separiert werden. Um 
					beispielsweise auf das Element <varname>id</varname> von
					<varname>{$page}</varname> zuzugreifen, müsste man
					<userinput>{$page.id}</userinput> schreiben, worauf dann
					<computeroutput>16</computeroutput> erschienen würde. 
				</para>

				<para>
					Man kann auch jeweils alle Elemente eines Arrays ausgeben:
				</para>

				<programlisting><![CDATA[
{foreach from=$page key=_element item=_value}
	Element: {$_element}
	Wert: {$_value}
{/foreach}
]]></programlisting>

				<para>
					Dieses Konstruktur iteriert durch den gesamten Array
					<varname>$page</varname> und gibt jedes einzelne Element
					samt Name (<code>{$_element}</code>) und Wert
					(<code>{$_value}</code>) aus (gekürzt):
				</para>

				<programlisting><![CDATA[
Element: id
Wert: 16
Element: project
Wert: 1
Element: navigation
Wert: 3
Element: root_node
Wert: 15
Element: parent
Wert: 15
Element: lft
Wert: 2
Element: rgt
Wert: 3
...
]]></programlisting>
			
			<tip>
				<para>
					Auf diese Weise lässt sich leicht herausfinden, auf welche
					Daten in eine Vorlage zugegriffen werden kann oder welche
					Informationen nachgeladene Daten mitbringen, ohne dass man
					die Dokumentation wälzen muss.
				</para>
			</tip>
			</sect3>

			<sect3 id="templating.templates.usage.load_more_data">
				<title>Daten nachladen</title>

				<para>
					Die Daten, die standardmässig in den Vorlagen zur Benutzung
					bereitstehen, entsprechen nur einem kleinen Teil der Daten,
					die Welcompose bereithält. Man denke nur an Navigationen oder
					Boxen. Diese Daten müssen jeweils von Hand nachgeladen werden.
				</para>

				<para>
					Zu diesem Zweck verfügt Welcompose über zwei Funktionen, mit
					denen direkt aus den Vorlagen heraus auf die internen APIs
					von Welcompose zugegriffen werden kann &ndash; genauer gesagt
					auf alle lesenden Methoden<footnote>
					<para>
						Schreibende Methoden sind aus Sicherheitsgründen mittels
						einer Whitelist für den Zugriff aus den Vorlagen gesperrt.
					</para>
					</footnote>. So bietet Welcompose innerhalb der Vorlagen
					sozusagen dieselbe Funktionalität und Flexibilität, wie die
					Modifikation des Original-Quellcode bei anderen Systemen.
				</para>

				<para>
					Die beiden Funktionen respektive Smarty Plug-ins, welche den
					Zugriff auf die internen APIs bereitstellen, heissen
					<code>select_simple</code> und <code>select_named</code>. Sie
					tun beide dasselbe: Sie rufen die gewünschte Funktion mit den
					angegebenen Parametern auf und stellen die retournierten Daten
					innerhalb der Vorlage bereit. So kann auf sie zugegriffen
					werden, als seien die Daten bereits von Anfang an geladen
					gewesen. 
				</para>

				<para>
					<code>select_simple</code> und <code>select_named</code>
					funktionieren fast gleich. Es gibt nur einen kleinen
					Unterschied in der Art, wie sie die Funktionen aufrufen. Aber
					dazu erst später mehr. Für den Moment tun wir so, als wären
					sie identisch.
				</para>

				<para>
					Ein Aufruf von <code>select_simple</code> respektive
					<code>select_named</code> besteht nebst dem Namen der Funktion
					(<code>select_simple</code> respektive
					<code>select_named</code>) immer aus mindestens vier
					Parametern: Dies sind <varname>ns</varname>,
					<varname>class</varname>, <varname>method</varname> und
					<varname>var</varname>. 
				</para>

				<programlisting><![CDATA[
{select_named ns="Content" class="BlogPosting"
	method="selectBlogPostings" var="blog_postings"}
]]></programlisting>

				<para>
					Die Bedeutung von <varname>var</varname> ist schnell erklärt:
					<varname>var</varname> bezeichnet den Variablennamen, dem
					die von der Funktion zurückgegebenen Daten innerhalb der
					Vorlage zugeordnet werden sollen. Auf die Daten von obigem
					Aufruf liesse sich also über die Variable
					<varname>$blog_postings</varname> zugreifen. Der Variablenname
					ist frei wählbar, so könne man statt
					<varname>$blog_postings</varname> auch
					<varname>$blps</varname> schreiben.  
				</para>

				<para>
					Die anderen drei Parameter <varname>ns</varname>,
					<varname>class</varname> und <varname>method</varname> gehören
					zusammen und dienen dazu, <code>select_simple</code> 
					respektive <code>select_named</code> zu sagen, welche
					Welcompose-Funktion sie ausführen sollen.
				</para>

				<para>
					Damit man weiss, was man überhaupt für Werte den Parametern
					übergeben muss, muss entweder einen Blick in die
					API-Dokumentation (siehe <xref
					linkend="development.api_docs"/>) oder direkt in den Code
					werfen.
				</para>

				<para>
					Welcompose verfügt über eine Menge von Klassen, die mit
					Begriffen wie Application, Community, Content oder Media
					beginnen. Auf sie folgt ein Unterstrich, bevor ein weiterer
					Begriff wie BlogPosting, GeneratorForm oder PageType folgt.
				</para>

				<para>
					Die Begriffe vor dem Unterstrich (<code>_</code>) dienen
					zur Gruppierung der Klassen. Alle Klassen, die Content
					anfangen, haben irgendwas mit den Inhalten zu tun, die
					Welcompose verwaltet. Die Klassen mit Media kümmern sich
					dagegen um Multimediaobjekte wie Bilder oder Filme. Diese
					Organisation nach Bereichen nennen wir bei Welcompose 
					Namespacing<footnote>
					<para>
						Namespacing ist eigentlich der falsche Begriff, da PHP
						keine Namespaces unterstützt und es somit nur eine grosse
						Lüge ist. Aber uns ist kein besserer Name eingefallen... 
					</para>
					</footnote>, oder kurz <varname>ns</varname>. Dies bedeutet,
					wer auf eine Klasse aus Application, Community, Content oder
					Media zugreifen will, muss bei <varname>ns</varname> entweder
					<userinput>Application</userinput>,
					<userinput>Community</userinput>, 
					<userinput>Content</userinput> oder
					<userinput>Media</userinput> eintragen.
				</para>

				<para>
					Nachdem der Teil links des Unterstrichs bereits vergeben ist,
					bleibt rechts neben dem Unterstrich noch ein Teil des
					Klassennamens übrig. Dieser wird jeweils für den Parameter
					<varname>class</varname> verwendet. Wer also etwas aus der
					Klasse Content_PageType will, wird als <varname>ns</varname>
					<userinput>Content</userinput> verwendenden und als 
					<varname>class</varname> <userinput>PageType</userinput>.
				</para>

				<para>
					Mit Hilfe von <varname>ns</varname> und
					<varname>class</varname> weiss Welcompose nun, mit welcher
					Klasse es arbeiten soll. Nun geht es aber noch darum,
					Welcompose zu sagen, welche Funktion respektive Methode es
					daraus verwenden soll, indem man für <varname>method</varname>
					kurzerhand den Methoden-Namen eingibt. Möchte man
					beispielsweise alle Page Types auslesen, gibt man
					<userinput>selectPageTypes</userinput> ein. Der ganze
					Aufruf sieht dann etwa so aus:
				</para>

				<programlisting><![CDATA[
{select_named ns="Content" class="PageType" method="selectPageTypes"
	var="page_types"}
]]></programlisting>

				<warning>
					<para>
						Wenn die Smarty Debug Console mittels <code>{debug}</code>
						vor der Benutzung von <code>{select_named}</code>
						respektive <code>{select_simple}</code> aufgerufen wird,
						tauchen die angeforderten Daten, im obigen Fall
						<varname>{$page_types}</varname>, in der Smarty Debug
						Console nicht auf. Wer die angeforderten Daten einbeziehen
						möchte, muss <code>{debug}</code> nach dem Aufruf von
						<code>{select_simple}</code> respektive
						<code>{select_named}</code> anwenden.
					</para>
				</warning>

				<para>
					Nun wird man in den seltensten Fällen alle Page Types,
					Blog Postings oder alle Bilder auslesen wollen. In der Regel
					möchte man beispielsweise nur die neusten Blog Postings. 
					Dies kann man Welcompose sagen, indem man
					<code>select_simple</code> und <code>select_named</code>
					weitere Parameter übergibt. Und davon gibt es je nach Funktion
					eine ganze Menge. Wer beispielsweise in der API-Dokumentation
					den Eintrag zu <code>selectBlogPostings()</code> nachliest,
					findet eine Liste unterstützter Parameter wie
					<varname>page</varname> oder <varname>draft</varname>, mit
					denen sich beispielsweise festlegen lässt, von welcher
					Seite Blog Postings geladen werden sollen
					(<varname>page</varname>) oder wie der Entwurfsstatus der
					Blog Postings (<varname>draft</varname>) sein muss. Diese
					Parameter kann man <code>select_simple</code> respektive
					<code>select_named</code> einfach mitgeben:
				</para>

				<programlisting><![CDATA[
{select_named ns="Content" class="BlogPosting" method="selectBlogPostings"
	var="blog_postings" page="12" draft="0"}
]]></programlisting>

				<para>
					Kommen wir nun zum Unterschied zwischen
					<code>select_simple</code> und <code>select_named</code>.
				</para>

				<para>
					Als Faustregel für alle, für die die bisherigen Erläuterungen
					bereits an Fachchinesisch grenzen, kann man sich merken,
					dass für alle Funktionen respektive Methoden, die mehrere
					Datensätze auslesen und darum
					<code>selectBlogPostings()</code> oder
					<code>selectPageTypes()</code> heissen (man beachte das
					Plural-S!), <code>select_named</code> verwendet werden muss.
					Alle Funktionen, die dagegen nur einen Datensatz auslesen
					und darum <code>selectNavigation()</code> oder
					<code>selectGlobalBox()</code> heissen, benötigen
					<code>select_simple</code>.
				</para>

				<para>
					Doch warum? Zu diesem Zweck ziehen wir wieder die
					API-Dokumentation zur Funktion respektive Methode
					<code>selectBlogPostings()</code> und ihrem Geschwister
					<code>selectBlogPosting()</code> zu Rate. In beiden Einträgen
					ist eine Zeile nach der Form 
					<code><![CDATA[array   selectBlogPostings  ([array $params = array()])]]></code>
					respektive <code><![CDATA[array   selectBlogPosting  (int $id)]]></code>
					enthalten. Dabei handelt es sich um die jeweiligen
					Funktionssignaturen.
				</para>

				<para>
					Überall, wo <code><![CDATA[([array $params = array()])]]></code>
					nach dem Funktionsnamen wie <code>selectBlogPostings</code>
					steht, muss <code>select_named</code> stehen. Denn
					<code>select_named</code> nimmt alle Parameter, die abgesehen
					von <varname>ns</varname>, <varname>class</varname>,
					<varname>method</varname> und <varname>var</varname> angegeben
					werden, und formt diese in den Array
					<varname>$params</varname> um, den die Funktionen erwarten.
					Dies ist nötig, damit man von der Vielzahl der Parameter,
					die diese Funktionen zur Filterung der Datensätze
					anbieten, jeweils nur die benutzt werden, die man verwenden
					möchte.
				</para>

				<para>
					Überall, wo <code><![CDATA[(int $id)]]></code> steht, muss
					dagegen <code>select_simple</code> verwendet werden. Denn
					die Funktionen erwarten einen oder mehrere Parameter in
					einer festen Reihenfolge, die von <code>select_simple</code>
					eingesetzt werden &ndash; in diesem Fall <varname>id</varname>.
					Wenn eine Funktionssignatur wie
					<code><![CDATA[(int $page, int $id)]]></code> vorliegt,
					müssen die Parameter <varname>page</varname> und
					<varname>id</varname> in den select_simple-Aufruf eingesetzt
					werden und zwar in genau dieser Reihenfolge, damit die 
					Daten korrekt angefordert werden:
				</para>

				<programlisting><![CDATA[
{select_simple ns="Beispiel" class="TestKlasse" method="selectTestKlasse"
	page="2" id="15"}
]]></programlisting>
				
			</sect3>
			
			<sect3 id="templating.templates.usage.edit_templates_with_editor">
				<title>Editor zur Vorlagen-Verwaltung verwenden</title>
				
				<para>
					Wer trotz Verwaltung der Vorlagen nicht auf seinen
					angestammten Editor verzichten will (beispielsweise
					um von Syntax-Highlighting oder anderen Funktionen zu
					profitieren), muss das nicht. Der Webbrowser Firefox
					(und auch der grössere Bruder Mozilla/Seamonkey),
					der für verschiedene Betriebssysteme erhältlich ist,
					ermöglicht die Integration des gewünschten Editors zur
					Bearbeitung von Inhalten innerhalb eines HTML-Formulars.
				</para>
				
				<para>
					Firefox bringt diese Funktionalität zwar nicht von Haus
					aus mit, allerdings existieren verschiedene Erweiterungen
					zu diesem Zweck:
				</para>
				
				<variablelist>
					<varlistentry>
						<term>Mozex</term>
						<listitem>
							<para>
								Mozex<footnote>
								<para>
									<ulink url="http://mozex.mozdev.org/"/>
								</para>
								</footnote> ermöglicht über das Kontextmenü das
								Bearbeiten einer Textarea, wie sie für
								die Darstellung des Vorlagen-Quellcodes
								verwendet wird, in einem beliebigen Editor.
								Die Erweiterung funktioniert aktuell sowohl
								mit Windows, Linux und MacOS X (getestet in
								Kombination mit Textmate).
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>It's All Text!</term>
						<listitem>
							<para>
								It's All Text!<footnote>
								<para>
									<ulink url="https://addons.mozilla.org/de/firefox/addon/4125"/>
								</para>
								</footnote> kann über eine kleine Schaltfläche
								in der Ecke einer Textarea aufgerufen werden.
								Sollte mindestens auf Windows und MacOS X
								funktionieren.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
				
				<para>
					Sollten Sie weitere Tipps kennen, um das Editieren von
					Vorlagen einfacher zu machen, nehmen wir diese gerne in
					das Handbuch auf.
				</para>
			</sect3>
		</sect2>
	</sect1>
	
	<sect1 id="templating.template_sets">
		<title>Vorlagengruppen</title>
		
		<sect2 id="templating.template_sets.introduction">
			<title>Einführung</title>
			
			<para>
				Vorlagengruppen dienen zur Organisation von Vorlagen und sorgen
				zusammen mit den Vorlagentypen (siehe <xref
				linkend="templating.template_types"/>) dafür, dass für
				eine Seite die jeweils richtige Vorlage verwendet wird. Wie
				dies genau funktioniert, erklärt <xref
				linkend="templating.template_types.usage"/>.
			</para>
			
			<para>
				Eine Vorlagengruppe besteht aus einem oder mehreren Vorlagen.
				Diese Vorlagen werden zur Darstellung von allen Seiten
				verwendet, die der jeweiligen Vorlagengruppe zugeordnet
				sind. Durch die Zuordnung unterschiedlicher Vorlagengruppen pro
				Seite ist es möglich, Seiten ein komplett unterschiedliches
				Aussehen zu geben. 
			</para>
			
			<para>
				Pro Vorlagen-Typ darf innerhalb einer Vorlagengruppe nur
				eine Vorlage existieren. Es ist aber nicht nötig, für jeden
				Vorlagen-Typ eine Vorlage anzulegen. Es ist absolut
				ausreichend, nur diejenigen Vorlagen anzulegen, die man auch
				wirklich benötigt.
			</para>
			
		</sect2>
		
		<sect2 id="templating.template_sets.manage_sets">
			<title>Verwaltung</title>
			
			<para>
				Die Verwaltung der Vorlagengruppen erfolgt im Bereich
				<guimenu>Vorlagen</guimenu> im Unterpunkt
				<guisubmenu>Vorlagengruppen</guisubmenu>. Die Übersicht listet
				die vorhandenen Vorlagengruppen zusammen mit dem Namen und einer
				allenfalls vorhandenen Beschreibung. Dazu werden ein Link
				zum Erstellen, Bearbeiten und Löschen einer vorhandenen
				Vorlagengruppe geboten. 
			</para>
			
			<figure id="templating.template_sets.manage_sets.overview">
				<title>Übersicht über vorhandene Vorlagengruppen</title>
				<graphic fileref="images/templating/template_sets/manage_sets.overview.png"/>
			</figure>
			
			<para>
				Sobald man auf den Link <guibutton>Neu anlegen</guibutton> klickt,
				kommt man zum Formular zum Hinzufügen einer neuen
				Vorlagengruppe.
			</para>
			
			<figure id="templating.template_sets.manage_sets.add_new">
				<title>Neue Vorlagengruppe anlegen</title>
				<graphic fileref="images/templating/template_sets/manage_sets.add_new.png"/>
			</figure>
			
			<variablelist>
				<varlistentry>
					<term><guimenuitem>Name</guimenuitem></term>
					<listitem>
						<para>
							Name der Vorlagengruppe, die zur Auswahl des
							Vorlagengruppe und zu dessen Zuordnung zu einer
							Seite dient. Kann frei gewählt werden.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Beschreibung</guimenuitem></term>
					<listitem>
						<para>
							Optionaler Beschreibungstext zur Vorlagengruppe. 
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		
		<sect2 id="templating.template_sets.usage">
			<title>Anwendung</title>
			
			<sect3 id="templating.template_sets.usage.different_templates_for_a_template_type">
				<title>Verschiedene Vorlagen für einen Seitentyp</title>
				
				<para>
					Normalerweise legt man Vorlagen so an, dass sie für
					möglichst viele verschiedene Seiten eingesetzt werden
					können. Hat man beispielsweise 3 Seiten des Typs <emphasis>Simple
					Page</emphasis>, legt man in der Regel eine Vorlage des Typs 
					<emphasis>simple_page_index</emphasis> an und ordnet sie einem Vorlagengruppe
					zu, der von allen drei Simple Pages verwendet wird.
				</para>
				
				<para>
					Ab und zu kann es aber nötig sein, einigen der Simple
					Pages ein anderes Aussehen zu geben als den anderen. Um
					dies zu erreichen, legt man eine weitere Vorlage des Typs
					simple_page_index an, ordnet sie einem zweiten speziell
					für diesen Zweck angelegtem Vorlagengruppe zu und verbindet
					diesen dann mit den Seiten, die ein anderes Aussehen
					erhalten sollen.
				</para>
				
				<para>
					Bei einer Blog-Seite, bei der man mehrere Vorlagen für
					alle Ansichten braucht, aber beispielsweise nur das
					Monatsarchiv bei einer Seite anders aussehen lassen will
					als bei den anderen Seiten, ist das Vorgehen ähnlich.
				</para>
				
				<para>
					Man legt einen zweiten Vorlagengruppe an und erstellt
					für das Monatsarchiv eine neue Vorlage des gewünschten
					Aussehens, worauf man den Vorlagengruppe mit der Seite
					verbindet, die das andere Aussehen erhalten soll. Da sich
					im neu erstellten Vorlagengruppe bislang aber nur die
					Vorlage für das Monatsarchiv befindet, können die anderen
					Seiten, die zu einem Blog gehören, nicht angezeigt
					werden, weil Welcompose die Vorlage dazu nicht findet.
				</para>
				
				<para>
					Um dies zu beheben, ist es <emphasis>nicht</emphasis>
					nötig, die anderen Vorlagen für die Startseite des Blogs
					und die anderen Ansichten zu duplizieren. Statt dessen
					kann man die bestehenden Vorlagen öffnen und sie einfach
					<emphasis>beiden</emphasis> Vorlagengruppenn zuordnen.
					Auf diese Weise können alle Vorlagen, abgesehen vom
					unterschiedlich aussehenden Monatsarchiv, für alle
					Blog-Seiten gleichzeitig verwendet werden. 
				</para>
			</sect3>
			
			<sect3 id="templating.template_sets.change_templates">
				<title>Vorlagen wechseln</title>
				
				<para>
					Müssen während des Betriebs der Webseiten die Vorlagen
					einzelner oder aller Seiten ausgetauscht werden, muss
					man dazu die Webseiten nicht abschalten oder die Vorlagen
					im laufenden Betrieb anpassen.
				</para>
				
				<para>
					Zuerst empfiehlt es sich, lokal mit den aktuellen Daten
					der Online-Installation die Vorlagen vorzubereiten. Sobald
					diese bereit sind, kann man je nach Bedarf einen oder
					mehrere Vorlagengruppen anlegen und mit den lokal
					vorbereiteten Vorlagen ausstatten. Haben Sie alle Bilder,
					Style Sheets und andere benötigten Elemente hochgeladen,
					können Sie bei Bedarf eine neue Navigation anlegen
					und in deren Rahmen ein paar Testseiten erstellen, um 
					mit denen die Funktionstüchtigkeit der Vorlagen zu testen.
					Hat man dies erledigt, kann man die Testseiten wieder
					löschen &ndash; die Navigation kann für Tests in
					der Zukunft behalten werden.
				</para>
				
				<para>
					Um die neuen Vorlagen zu aktivieren, braucht man zum
					gewünschten Zeitpunkt bei allen Seiten nur noch den
					zugeordneten Vorlagengruppe austauschen.
				</para>
				
				<para>
					Auf diese Weise lassen sich weit im Voraus Vorlagen für
					einen bestimmten Zweck vorbereiten und die Auswirkungen
					eines Vorlagenwechsels respektive die Ausfallzeit für die
					Besucher auf ein Minimum reduzieren. Und sollte man zu
					einem späteren Zeitpunkt wieder die alten Vorlagen
					verwenden wollen, kann man einfach die den einzelnen
					Seiten zugeordneten Vorlagengruppen austauschen.
				</para>
			</sect3>
		</sect2>
	</sect1>
	
	<sect1 id="templating.template_types">
		<title>Vorlagentypen</title>
		
		<sect2 id="templating.template_types.introduction">
			<title>Einführung</title>
			
			<para>
				Die Vorlagentypen regeln innerhalb von Welcompose, für welche
				Art von Seite (beispielsweise Blog-Archiv oder Formular) eine
				Vorlage dient. Ein Vorlagen-Typ ist somit so etwas wie der 
				"Dateiname" der Vorlage und dient im Kombination mit den
				Vorlagengruppen (siehe <xref
				linkend="templating.template_sets"/>) dazu, Vorlagen zu
				organisieren.
			</para>
			
		</sect2>
		
		<sect2 id="templating.template_types.manage_types">
			<title>Verwaltung</title>
			
			<para>
				Die Verwaltung der Vorlagentypen erfolgt im Bereich
				<guimenu>Vorlagen</guimenu> beim Unterpunkt
				<guisubmenu>Vorlagentypen</guisubmenu>. Die Übersicht listet
				die vorhandenen Vorlagentypen zusammen mit dem Namen und einer
				allenfalls vorhandenen Beschreibung. Dazu werden ein Link
				zum Erstellen, Bearbeiten und Löschen eines vorhandenen
				Vorlagen-Typs geboten. 
			</para>
			
			<note>
				<para>
				Die von Welcompose mitgelieferten Vorlagentypen ( (siehe <xref
				linkend="templating.template_types.usage"/>) sind nicht editierbar.
				</para>
			</note>
			
			<figure id="templating.template_types.manage_types.overview">
				<title>Übersicht über vorhandenen Vorlagentypen</title>
				<graphic fileref="images/templating/template_types/manage_types.overview.png"/>
			</figure>
			
			<para>
				Sobald man auf den Link <guibutton>Neu anlegen</guibutton> klickt,
				kommt man zum Formular zum Hinzufügen eines neuen
				Vorlagen-Typs.
			</para>
			
			<figure id="templating.template_types.manage_types.add_new">
				<title>Neuen Vorlagen-Typ hinzufügen</title>
				<graphic fileref="images/templating/template_types/manage_types.add_new.png"/>
			</figure>
			
			<variablelist>
				<varlistentry>
					<term><guimenuitem>Name</guimenuitem></term>
					<listitem>
						<para>
							Name des Vorlagen-Typs, der zur Auswahl des
							Vorlagen-Typs und zu dessen Zuordnung zu einer
							Vorlage dient. Darf aus grossen und kleinen
							Buchstaben, Ziffern und Unterstrichen bestehen.
							Eigene Vorlagentypen werden vorteilhafterweise
							mit einem Prefix wie <userinput>custom_</userinput>
							versehen, damit keine Probleme entstehen, sollte
							ein Welcompose-Update einen Vorlagen-Typ mit
							demselben Namen mitbringen.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Beschreibung</guimenuitem></term>
					<listitem>
						<para>
							Optionaler Beschreibungstext zum Vorlagen-Typ. 
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		
		<sect2 id="templating.template_types.usage">
			<title>Anwendung</title>
			
			<sect3 id="templating.template_types.usage.which_template_type_for_which_view">
				<title>Welcher Vorlagen-Typ für welche Ansicht</title>
				
				<para>
					Welcompose verfügt über etliche von vordefinierten
					Vorlagentypen, doch welcher Vorlagen-Typ wird für welche
					Ansicht benötigt?
				</para>
				
				<table frame="none" id="templating.template_types.usage.which_template_type_for_which_view.list_of_template_types">
					<title>Liste der Vorlagen Typen</title>
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									Vorlagen-Typ
								</entry>
								<entry>
									Beschreibung
								</entry>
								<entry>
									Seiten-Typ
								</entry>
								<entry>
									URL-Action
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									blog_archive_month
								</entry>
								<entry>
									Monatsarchiv einer Blog-Seite
								</entry>
								<entry>
									WCOM_BLOG
								</entry>
								<entry>
									ArchiveMonth
								</entry>
							</row>
							<row>
								<entry>
									blog_archive_year
								</entry>
								<entry>
									Jahresarchiv einer Blog-Seite
								</entry>
								<entry>
									WCOM_BLOG
								</entry>
								<entry>
									ArchiveYear
								</entry>
							</row>
							<row>
								<entry>
									blog_atom10
								</entry>
								<entry>
									ATOM-1.0-Feed mit aktuellen Blog Postings
								</entry>
								<entry>
									WCOM_BLOG
								</entry>
								<entry>
									Atom10
								</entry>
							</row>
							<row>
								<entry>
									blog_comments_atom10
								</entry>
								<entry>
									ATOM-1.0-Feed mit aktuellen Kommentaren zu
									Blog Postings
								</entry>
								<entry>
									WCOM_BLOG
								</entry>
								<entry>
									CommentsAtom10
								</entry>
							</row>
							<row>
								<entry>
									blog_comments_rss20
								</entry>
								<entry>
									RSS-2.0-Feed mit aktuellen Kommentaren zu
									Blog Postings
								</entry>
								<entry>
									WCOM_BLOG
								</entry>
								<entry>
									CommentsRss20
								</entry>
							</row>
							<row>
								<entry>
									blog_index
								</entry>
								<entry>
									Übersichtsseite über die aktuellen Blog
									Postings ("Startseite")
								</entry>
								<entry>
									WCOM_BLOG
								</entry>
								<entry>
									Index
								</entry>
							</row>
							<row>
								<entry>
									blog_item
								</entry>
								<entry>
									Ansichtsseite für ein einzelnes Blog
									Posting
								</entry>
								<entry>
									WCOM_BLOG
								</entry>
								<entry>
									Item
								</entry>
							</row>
							<row>
								<entry>
									blog_podcast_itms
								</entry>
								<entry>
									Feed aktueller Podcasts nach iTunes-Format
								</entry>
								<entry>
									WCOM_BLOG
								</entry>
								<entry>
									PodcastItms
								</entry>
							</row>
							<row>
								<entry>
									blog_rss20
								</entry>
								<entry>
									RSS-2.0-Feed mit aktuellen Blog Postings
								</entry>
								<entry>
									WCOM_BLOG
								</entry>
								<entry>
									Rss20
								</entry>
							</row>
							<row>
								<entry>
									generator_form_index
								</entry>
								<entry>
									Stellt ein Generator-Formulars dar
								</entry>
								<entry>
									WCOM_GENERATOR_FORM
								</entry>
								<entry>
									Index
								</entry>
							</row>
							<row>
								<entry>
									generator_form_mail
								</entry>
								<entry>
									E-Mail, das von einem Generator-Formular
									versendet wird.
								</entry>
								<entry>
									WCOM_GENERATOR_FORM
								</entry>
								<entry>
									-
								</entry>
							</row>
							<row>
								<entry>
									simple_form_business_form_mail
								</entry>
								<entry>
									E-Mail, das von einem Simple Form
									versendet wird, wenn es als
									Geschäftsformular betrieben wird.
								</entry>
								<entry>
									WCOM_SIMPLE_FORM
								</entry>
								<entry>
									-
								</entry>
							</row>
							<row>
								<entry>
									simple_form_index
								</entry>
								<entry>
									Dient zur Darstellung eines Simple Forms.
								</entry>
								<entry>
									WCOM_SIMPLE_FORM
								</entry>
								<entry>
									Index
								</entry>
							</row>
							<row>
								<entry>
									simple_form_personal_form_mail
								</entry>
								<entry>
									E-Mail, das von einem Simple Form
									versendet wird, wenn es als privates
									Formular betrieben wird.
								</entry>
								<entry>
									WCOM_SIMPLE_FORM
								</entry>
								<entry>
									-
								</entry>
							</row>
							<row>
								<entry>
									simple_guestbook_form_mail
								</entry>
								<entry>
									E-Mail, das von einem Simple Guestbook 
									versendet wird, wenn die Option "Send Notification"
									aktiv ist.
								</entry>
								<entry>
									WCOM_SIMPLE_GUESTBOOK
								</entry>
								<entry>
									-
								</entry>
							</row>
							<row>
								<entry>
									simple_guestbook_index
								</entry>
								<entry>
									Dient zur Darstellung eines Simple Guestbook.
								</entry>
								<entry>
									WCOM_SIMPLE_GUESTBOOK
								</entry>
								<entry>
									Index
								</entry>
							</row>
							<row>
								<entry>
									simple_page_index
								</entry>
								<entry>
									Für die Anzeige einer einfachen
									Inhaltsseite.
								</entry>
								<entry>
									WCOM_SIMPLE_PAGE
								</entry>
								<entry>
									Index
								</entry>
							</row>
							<row>
								<entry>
									system_login
								</entry>
								<entry>
									Generische Vorlage für
									<emphasis>alle</emphasis> Seitentypen,
									die für den Login einer geschützten
									Seite verwendet wird. Die Vorlage wird,
									sofern der Besucher noch nicht angemeldet
									ist, anstelle der eigentlichen Vorlage
									angezeigt. Wenn der Benutzer bereits
									angemeldet ist, kriegt er diese Vorlage
									nicht zu Gesicht.
								</entry>
								<entry>
									WCOM_SIMPLE_PAGE
								</entry>
								<entry>
									- (alle)
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
				<para>
					Die Spalte "Vorlagen-Typ", listet die jeweiligen
					Vorlagentypen, wie sie standardmässig von Welcompose
					mitgebracht werden. Eine kurze Erklärung des Einsatzzwecks
					bietet die Spalte mit der Beschreibung. In der Spalte
					"Seitentyp" steht, zu welchem Seitentyp der Vorlagen-Typ
					gehört. Die letzte Spalte "URL-Action" listet den
					jeweiligen Wert für den Parameter
					<varname>action</varname> im URL zum Seitenaufruf, der
					diesen Vorlagen-Typ verlangt. Mit seiner Hilfe lässt sich
					herausfinden, welche Vorlage für einen bestimmten
					Seiten-URL geladen wird. 
				</para>
				
				<para>
					Bei einem URL wie 
				</para>
				
				<programlisting><![CDATA[
index.php?project_name=demo&action=ArchiveMonth&posting_year_added=2007&posting_month_added=06
]]></programlisting>
				
				<para>
					ist der Wert für <varname>action</varname>
					<userinput>ArchiveMonth</userinput>, der, wie die Tabelle
					zeigt, die Verwendung einer Vorlage vom Typ
					blog_archive_month impliziert.
				</para>
				
				<para>
					Bei der URL-Action Index, die mehreren Vorlagentypen
					zugeordnet ist, kann man nicht nur nach der URL-Action
					gehen, sondern muss gleichzeitig noch den jeweiligen
					Seitentyp einbeziehen, um den richtigen Vorlagen-Typ
					zu einem URL zu finden. Handelt es sich um eine Blog-Seite,
					die aufgerufen wird, wird eine Vorlage vom Typ blog_index
					benötigt. Handelt es sich um eine Simple Page, wird eine
					Vorlage vom Typ simple_page_index benötigt.
				</para>
			</sect3>
			
			<sect3 id="templating.template_types.usage.referencing_templates">
				<title>Vorlagen referenzieren</title>
				
				<para>
					Wie in <xref linkend="templating.functionality"/> bereits
					erwähnt, benötigt Welcompose zwei Informationen, um
					die richtige Vorlage für die Anzeige einer Seite
					auszuwählen:
				</para>
				
				<itemizedlist>
					<listitem>
						<para>
							Die ID der aufzurufenden Seite.
						</para>
					</listitem>
					<listitem>
						<para>
							Den Typ der gewünschten Vorlage.
						</para>
					</listitem>
				</itemizedlist>
				
				<para>
					Mit Hilfe der Seiten-ID weiss Welcompose, in welchem
					Vorlagengruppe nach der Vorlage gesucht werden muss. Und
					der Vorlagen-Typ sagt Welcompose schlussendlich, welche
					Vorlage aus dem Vorlagengruppe genommen werden muss.
				</para>
				
				<para>
					Wenn man also irgendwo innerhalb einer Vorlage (bei
					<code><![CDATA[{include}]]></code>) oder innerhalb von
					PHP-Code (bei den Smarty-Methoden <code><![CDATA[fetch()]]></code>
					und <code><![CDATA[display()]]></code>) eine Vorlage von
					Smarty anfordert, müssen diese zwei Informationen angegeben
					werden.
				</para>
				
				<para>
					Dabei muss man ein spezielles Format einhalten. Einerseits
					muss ein sogenannter Resource Type
					(<code><![CDATA[wcom:]]></code>) angegeben werden, damit
					Smarty weiss, aus welcher Quelle die Vorlagen bezogen
					werden sollen. Andererseits müssen der Vorlagen-Typ und
					die Seiten-ID so zusammengesetzt werden, dass sich ein
					gültiger Vorlagen-Name ergibt. Daraus ergibt sich
					folgendes Format: 
				</para>
				
				<programlisting><![CDATA[
wcom:simple_page_index.7
]]></programlisting>
				
				<para>
					Dabei ist <code><![CDATA[wcom:]]></code> der Resource
					Type und <code><![CDATA[simple_page_index.7]]></code> der
					Vorlagen-Name, der sich aus dem Vorlagen-Typ 
					<code><![CDATA[simple_page_index]]></code> und der
					Seiten-ID <code><![CDATA[7]]></code> zusammensetzt.
				</para>
				
				<note>
					<para>
						Das Format ist immer identisch und ist für alle Vorlagen
						gültig &ndash; nicht aber für Vorlagen, die direkt von der
						Festplatte gelesen werden (wie beispielsweise Globale Dateien
						und/oder Globale Vorlagen).
					</para>
				</note>
				
				<para>
					Am häufigsten werden Vorlagen wohl innerhalb von anderen
					Vorlagen angefordert. Ein einfaches Beispiel könnte etwa
					so aussehen:
				</para>
				
				<programlisting><![CDATA[
{include file="wcom:custom_navigation.7"}
]]></programlisting>
				
				<para>
					Auf diese Weise wird die Vorlage des Typs
					custom_navigation aus dem Vorlagengruppe ausgelesen, der
					mit der Seite mit der ID 7 verbunden ist. Allerdings
					wird kaum einmal direkt mit den Seiten-IDs gearbeitet,
					da die Vorlagen ja für möglichst viele Seiten einsetzbar
					sein sollen. Da bietet es sich an, die Seiten-ID durch
					eine Variable auf die jeweils aktuelle Seiten-ID setzen
					zu lassen. Alle Seiten respektive Ansichten innerhalb
					von Welcompose bieten zu diesem Zweck die Variable
					<varname>$page.id</varname>, welche immer die ID der
					jeweils aktuellen Seite enthält. Die universelle Variante
					von <code><![CDATA[{include file="wcom:custom_navigation.7"}]]></code>
					würde damit so aussehen:
				</para>
				
				<programlisting><![CDATA[
{include file="wcom:custom_navigation.`$page.id`"}
]]></programlisting>
				
				<para>
					(siehe auch <xref
				linkend="templating.template_types.usage.include_templates"/>)
				</para>
				
				<note>
					<para>
						Achten Sie darauf, die Backticks (<code>`</code>)
						um die Variable zu setzen. Ansonsten wird nicht der
						Wert von <varname>$page.id</varname> eingesetzt und
						die Seite kann nicht gefunden werden.
					</para>
				</note>
				
				<!-- <para>
					Im PHP-Quellcode muss jeweils nachgeschaut werden, 
					ob nicht bereits irgendwo eine Variable mit der aktuellen
					Seiten-ID herumschwirrt. Sollte Sie vorhanden sein,
					lässt sich der Name der Vorlage ebenso einfach wie direkt
					innerhalb der Vorlagen zusammensetzen und benutzen:
				</para>
				
				<programlisting><![CDATA[
$template_name = sprintf('wcom:blog_archive_year.%u', $page.id);
$smarty->fetch($template_name);
]]></programlisting> -->
				
			</sect3>
			
			<sect3 id="templating.template_types.usage.include_templates">
				<title>Vorlagen in Vorlagen integrieren</title>
				
				<para>
					Die meisten Vorlagen, die man für eine Webseite benutzt,
					haben grössere oder kleinere Teile gemeinsam, die also
					in jeder Vorlage identisch sind. Ein Beispiel sind
					Navigationen. Statt sie in jeder Vorlage separat zu
					implementieren, wäre es viel praktischer, wenn man diese
					Fragmente nur einmal implementieren müsste und in jeder
					Vorlage, wo sie vorkommen, automatisch einbinden lassen
					könnte.
				</para>
				
				<para>
					Smarty ermöglicht dies mittels sogenannten Includes, 
					bei denen mit der Funktion <code><![CDATA[{include}]]></code>
					andere Vorlagen in die aktuelle Vorlage automatisch
					integriert werden können.
				</para>
				
				<para>
					Um eine (Teil-)Vorlage zu erstellen, die mit Hilfe von
					<code><![CDATA[{include}]]></code> in eine andere
					Vorlage integriert werden kann, sind mehrere Schritte
					nötig: 
				</para>
				
				<orderedlist>
					<listitem>
						<para>
							Legen Sie einen neuen Vorlagen-Typ an, dem
							später die einzubindende Vorlage zugewiesen
							werden kann. Wenn Sie die Webseiten-Navigation
							auslagern wollen, kann der Vorlagen-Typ
							beispielsweise
							<userinput>custom_navigation</userinput> heissen.
						</para>
					</listitem>
					<listitem>
						<para>
							Fügen Sie das auszulagernde Fragment, in diesem
							Fall also die Navigation, in eine neue Vorlage
							ein, der Sie den Vorlagen-Typ
							<userinput>custom_navigation</userinput> zuweisen.
							Weisen Sie die neue Vorlage zudem der
							Vorlagengruppe zu, in denen sie zum Einsatz
							kommen soll. 
						</para>
					</listitem>
					<listitem>
						<para>
							Ersetzen Sie nun den Code für das ausgelagerte
							Fragment, also die Navigation, in allen Vorlagen
							mit der Referenz auf das ausgelagerte Fragent:
						</para>
						
						<programlisting><![CDATA[
{include file="wcom:custom_navigation.`$page.id`"}
]]></programlisting>
						<para>
							Sobald Sie die Vorlage abgespeichert und
							die zugehörige Seite aufgerufen haben, sollten
							Sie die Navigation an ihrer bekannten Stelle
							anstatt der Referenz sehen. 
						</para>
					</listitem>
				</orderedlist>
				
				<para>
					Soll ein weiteres Fragment ausgelagert werden, ist dies
					problemlos möglich. Es muss einfach ein anderer Name
					für den Vorlagen-Typ gewählt werden. Soll beispielsweise
					ein Seiten-Fuss in einer separaten Vorlage untergebracht
					werden, würde sich beispielsweise der Name
					<userinput>custom_footer</userinput> anbieten. 
					Entsprechend müsste auch die Referenz in 
					<code><![CDATA[{include}]]></code> angepasst werden.
				</para>
			</sect3>
		</sect2>
	</sect1>
		
	<sect1 id="templating.global_templates">
		<title>Globale Vorlagen</title>
		
		<sect2 id="templating.global_templates.introduction">
			<title>Einführung</title>
			
			<para>
				Da Welcompose zum Betrieb ohne FTP-Zugang konzipiert ist,
				müssen nebst den herkömmlichen Vorlagen für (X)HTML und
				XML auch alle anderen Dateien, die für eine Webseite
				benötigt werden, online verwaltet werden können.
			</para>
			
			<para>
				Um Dateien mit textuellem Inhalt wie CSS oder JavaScript
				kümmern sich die Globalen Vorlagen. Wer Binärdateien wie
				Bilder oder Flash-Videos verwalten will, muss sich mit den
				Globalen Dateien beschäftigen (siehe <xref
				linkend="templating.global_files"/>).
			</para>
		</sect2>
		
		<sect2 id="templating.global_templates.manage_global_templates">
			<title>Verwaltung</title>
			
			<para>
				Die Verwaltung der Globalen Vorlagen erfolgt im Bereich
				<guimenu>Vorlagen</guimenu> im Unterpunkt
				<guisubmenu>Globale Vorlagen</guisubmenu>. Die Übersicht listet
				die vorhandenen Vorlagen zusammen mit einer allenfalls
				vorhandenen Beschreibung. Dazu werden eine Reihe von
				Funktionen zur Bearbeitung von Globalen Vorlagen geboten:
			</para>
			
			<figure id="templating.global_templates.manage_global_templates.overview">
				<title>Übersicht über vorhandene Globale Vorlagen</title>
				<graphic fileref="images/templating/global_templates/manage_global_templates.overview.png"/>
			</figure>
			
			<variablelist>
				<varlistentry>
					<term><guimenuitem>Upload</guimenuitem></term>
					<listitem>
						<para>
							Ermöglicht das Hochladen einer Globalen Vorlage, 
							wobei mit dem Dateiinhalt der hochgeladenen Datei
							die auf dem Server hinterlegte Vorlage ersetzt
							wird. 
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Download</guimenuitem></term>
					<listitem>
						<para>
							Erlaubt den Download der Globalen Vorlage als
							Datei. 
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Bearbeiten</guimenuitem></term>
					<listitem>
						<para>
							Über die Schaltfläche <guibutton>Bearbeiten</guibutton>
							gelangt man zu einem Formular zum Bearbeiten der
							jeweiligen Globalen Vorlage.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Löschen</guimenuitem></term>
					<listitem>
						<para>
							Löscht die Globale Vorlage.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			
			<para>
				Sobald man auf den Link <guibutton>Neu anlegen</guibutton> klickt,
				kommt man zum Formular zum Hinzufügen einer neuen Globalen 
				Vorlage.
			</para>
			
			<figure id="templating.global_templates.manage_global_templates.add_new">
				<title>Globale Vorlage neu anlegen</title>
				<graphic fileref="images/templating/global_templates/manage_global_templates.add_new.png"/>
			</figure>
			
			<variablelist>
				<varlistentry>
					<term><guimenuitem>Name</guimenuitem></term>
					<listitem>
						<para>
							Name der Globalen Vorlage, genauer gesagt ein
							Dateiname. Vorzugsweise der Name, unter dem man
							die Datei auch auf dem Desktop abspeichern würde.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Beschreibung</guimenuitem></term>
					<listitem>
						<para>
							(Optionaler) Beschreibungstext der Globalen 
							Vorlage.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Inhalt</guimenuitem></term>
					<listitem>
						<para>
							Inhalt der Globalen Vorlage, also der Code in der
							jeweiligen CSS-, XML- oder JavaScript-Datei.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>MIME Typ</guimenuitem></term>
					<listitem>
						<para>
							Der MIME Type, den der Server senden soll, um die
							Datei gegenüber dem Browser zu identifizieren.
							Denn nur mit Hilfe des MIME Types kann der Browser
							erkennen, was er mit der jeweiligen Datei anfangen
							muss. <xref linkend="templating.global_templates.manage_global_templates.mime_types"/>
							zeigt, welcher MIME Type bei welcher Art von Inhalt
							respektive Datei zum Einsatz kommt.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Delimiter ändern</guimenuitem></term>
					<listitem>
						<para>
							Legt fest, ob Smarty für die Verarbeitung der
							Vorlage einen anderen Delimiter verwenden soll.
							Dies ist bei Dateien nötig, in denen viele 
							geschweifte Klammern (<code><![CDATA[{]]></code>
							und <code><![CDATA[}]]></code>) vorkommen, da
							sonst die Inhalte als Befehle interpretiert werden
							können. Ist die Box angekreuzt, verwendet Smarty
							als Delimiter <code><![CDATA[<%]]></code> und
							<code><![CDATA[%>]]></code>, wodurch die
							geschweiften Klammern nicht mehr interpretiert
							werden. Für welchen Dateityp so ein
							Delimiter-Wechsel sinnvoll sein dürfte, zeigt
							<xref linkend="templating.global_templates.manage_global_templates.mime_types"/>.
							Ein Beispiel hält <xref
							linkend="templating.global_templates.usage.manage_css_files"/>
							bereit.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			
			<table frame="none" id="templating.global_templates.manage_global_templates.mime_types">
				<title>Liste der MIME-Typen</title>
				<tgroup cols="3">
					<thead>
						<row>
							<entry>
								MIME Type
							</entry>
							<entry>
								Geeignet für
							</entry>
							<entry>
								Delimiter-Wechsel
							</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								text/css
							</entry>
							<entry>
								CSS-Dateien (<filename>*.css</filename>)
							</entry>
							<entry>
								ja
							</entry>
						</row>
						<row>
							<entry>
								text/html
							</entry>
							<entry>
								(X)HTML-Dateien (<filename>*.html</filename>,
								<filename>*.htm</filename> usw.)
							</entry>
							<entry>
								nein
							</entry>
						</row>
						<row>
							<entry>
								text/javascript
							</entry>
							<entry>
								JavaScript-Dateien (<filename>*.js</filename>)
							</entry>
							<entry>
								ja
							</entry>
						</row>
						<row>
							<entry>
								text/plain
							</entry>
							<entry>
								Text-Dateien (<filename>*.txt</filename>) und
								alle anderen Dateien mit textuellen Inhalten,
								die zu keinem anderen MIME Type passen.
							</entry>
							<entry>
								nein
							</entry>
						</row>
						<row>
							<entry>
								text/xml
							</entry>
							<entry>
								XML-Dateien (<filename>*.xml</filename>)
							</entry>
							<entry>
								nein
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			
		</sect2>
		
		<sect2 id="templating.global_templates.usage">
			<title>Anwendung</title>
			
			<sect3 id="templating.global_templates.usage.manage_css_files">
				<title>Beispiel: CSS-Dateien verwalten</title>
				
				<para>
					Die Verwendung der Globalen Vorlagen soll anhand
					einer CSS-Datei illustriert werden, da dies auch ein gutes
					Beispiel ist, wo und wie eine Änderung des Delimiters notwendig ist.
				</para>
				
				<para>
					Um die CSS-Datei als Globale Vorlage anzulegen, muss man
					zuerst zum Bereich <guimenu>Vorlagen</guimenu> und dort
					zum Unterpunkt <guisubmenu>Globale Vorlagen</guisubmenu>
					wechseln. Sobald man dort auf den Link
					<guibutton>Neu anlegen</guibutton> geklickt hat, kommt man zum
					Formular zum Anlegen einer Globalen Vorlage.
				</para>

				<note>
					<para>
						Für das Beispiel wird vorausgesetzt, das sie eine GIF Datei mit Namen
						<emphasis>container-bg.gif</emphasis> als Globale Datei (siehe <xref linkend="templating.global_files"/>)
						hochgeladen haben.
					</para>
				</note>
				
				<para>
					Machen Sie nun die folgenden Eingaben, um das Beispiel nachzuvollziehen
					(nicht aufgeführte Felder können Sie ignorieren):
				</para>
								
				<variablelist>
					<varlistentry>
						<term><guimenuitem>Name</guimenuitem></term>
						<listitem>
							<para>
								Geben Sie als Namen der Globalen Vorlage
								<filename>beispiel.css</filename> ein.
								Sie können auch einen anderen Namen verwenden,
								müssen einfach bei den nächsten Schritten
								<filename>beispiel.css</filename> jeweils
								durch den von Ihnen gewählten Namen ersetzen.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><guimenuitem>Inhalt</guimenuitem></term>
						<listitem>
							<para>
								Fügen Sie hier eine CSS Deklaration für unsere
								beispiel.css ein. Für das
								Beispiel reicht ein kurzer Code-Ausschnitt:
							</para>
							
							<programlisting><![CDATA[
#container {
	position: relative;
	margin: 0 auto;
	width: 993px;
	background: #fff url(container-bg.gif) top right no-repeat;
	text-align: left;
}
]]></programlisting>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><guimenuitem>MIME-Typ</guimenuitem></term>
						<listitem>
							<para>
								Wählen Sie hier <guimenuitem>text/css</guimenuitem> aus.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><guimenuitem>Delimiter ändern</guimenuitem></term>
						<listitem>
							<para>
								Setzen Sie hier vorerst
								<emphasis>keinen</emphasis> Haken.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
				
				<para>
					Ihre Globale Vorlage sollte nun so aussehen:
				</para>
				
				<figure id="templating.global_templates.usage.manage_css_files.add_new">
					<title>CSS-Datei als Globale Vorlage anlegen</title>
					<graphic fileref="images/templating/global_templates/usage.manage_css_files.add_new.png"/>
				</figure>
				
				<para>
					Wenn Sie die Vorlage jetzt speichern und die Datei direkt im Browser aufrufen
					(passen Sie den Pfad zur
					<filename>global_template.php</filename> entsprechend ihrem Installationpfad an. 
					Die <filename>global_template.php</filename> liegt immer im Root Ihrer Installation).
				</para>
				
				<programlisting><![CDATA[
http://pfad/der/installation/global_template.php?name=beispiel.css
]]></programlisting>

				<para>
					wird ihnen, abhängig vom der Konfiguration des Loggins (siehe <xref linkend="extended_configuration.logging.direct_output"/>) ein Fehler angezeigt oder sie erhalten
					eine weiße, leere Seite.
				</para>
				
				<para>
					Dieser Fehler wird dadurch verursacht, dass Smarty die
					geschweiften Klammern, die zur CSS-Syntax gehören, als
					Befehle interpretiert und auszuführen versucht.
				</para>
				
				<para>
					Um diesen Fehler zu beheben/verhindern, setzt man bei <guimenuitem>Delimiter ändern</guimenuitem>
					 einen Haken. Sobald
					man dies tut und die Datei wieder im Browser lädt, sollte
					der CSS-Code ganz ohne Modifikationen angezeigt werden, wie er
					eingegeben wurde.
				</para>
				
				<para>
					Würde man nun die CSS-Datei in eine HTML-Seite einbetten,
					würde das Hintergrund-Bild allerdings nicht angezeigt werden, da wir zuvor noch den
					Pfad zur Datei einfügen müssen.
				</para>
				
				<para>
					Entfernen Sie nun den Verweis zur
					<filename>container-bg.gif</filename> aus der Globalen
					Vorlage und lassen Sie den Cursor dort stehen, wo der
					Bildname war. Klicken Sie nun über der Textarea, in der der
					CSS-Code steht, auf <guibutton>Globale Dateien</guibutton> und wählen dort
					die oben angesprochene <filename>container-bg.gif</filename> Datei aus.
					Datei aus.
				</para>
				
				<figure id="templating.global_templates.usage.manage_css_files.insert_global_file">
					<title>Bild als Globale Datei ins CSS einfügen</title>
					<graphic fileref="images/templating/global_templates/usage.manage_css_files.insert_global_file.png"/>
				</figure>
				
				<para>
					Anstelle des einfachen Dateinamens steht nun in der 
					Vorlage ein Smarty-Befehl, der beim Aufbereiten der
					CSS-Datei den Platzhalter durch den effektiven Dateinamen
					zur Globalen Datei und damit dem Hintergrundbild ersetzt:
				</para>
				
				<programlisting><![CDATA[
#container {
	position: relative;
	margin: 0 auto;
	width: 993px;
	background: #fff url(<%global_file name="container-bg.gif"%>) top right no-repeat;
	text-align: left;
}
]]></programlisting>
				
				<para>
					Speichern Sie nun die Globale Vorlage und rufen Sie sie wieder
					wie zuvor im Browser direkt auf, sollten Sie statt den
					Smarty-Befehl nun den korrekten Pfad zur Globalen Datei sehen.
				</para>
				
				<para>
					Würden Sie nun die CSS-Datei in eine HTML-Datei einbinden,
					würde das Bild korrekt erscheinen. Wie das
					Referenzieren der Globalen Vorlage in einer Vorlage
					funktioniert, erklärt <xref
					linkend="templating.global_templates.usage.reference_global_templates"/>.
				</para>
				
				<note>
					<para>
						Diese Ersetzung der Bilder durch Globale Dateien müssen
						Sie für alle Bilder vornehmen, die Sie in einer CSS-Datei
						verwenden. Löschen Sie dazu einfach die alten
						Bildreferenzen und ersetzen Sie mit Hilfe der Auswahl
						der Globalen Dateien über das Pop-up, wie es im Rahmen
						des Beispiels vorgeführt wurde.
					</para>
				</note>
				
			</sect3>
			
			<sect3 id="templating.global_templates.usage.reference_global_templates">
				<title>Globale Vorlagen referenzieren</title>
				
				<para>
					Globale Vorlagen können sowohl in anderen Globalen
					Vorlagen als auch in normalen Vorlagen referenziert werden.
					Die Referenzen werden in Form einer Smarty-Funktion
					eingesetzt, welche bei der Verarbeitung der Seite durch
					den realen Pfad zur Globalen Vorlage ersetzt wird. So
					wird aus
				</para>
				
				<programlisting><![CDATA[
{global_template name="beispiel.css"}
]]></programlisting>
				
				<para>
					beispielsweise der Pfad
				</para>
				
				<programlisting><![CDATA[
/pfad/der/installation/global_template.php?name=beispiel.css
]]></programlisting>
				
				<para>
					Die Globalen Vorlagen können damit zum Beispiel in
					@import-Anweisungen in CSS-Dateien oder als src- oder
					href-Attribut in verschiedenen HTML-Tags verwendet
					werden. Beispiel:
				</para>
				
				<programlisting><![CDATA[
<link rel="stylesheet" href="{global_template name="beispiel.css"}"
	type="text/css" media="screen, projection" />
]]></programlisting>
				
				<para>
					wird zu
				</para>
				
				<programlisting><![CDATA[
<link rel="stylesheet" href="/pfad/der/installation/global_template.php?name=beispiel.css"
	type="text/css" media="screen, projection" />
]]></programlisting>
				
				<para>
					Die Smarty-Funktion zur Einbindung der Globalen Vorlagen
					muss man nicht selber schreiben, sondern kann man sie von
					einer Hilfsfunktion einsetzen lassen, die jeweils über den
					Eingabefeldern für die Vorlagen-Inhalte lokalisiert sind. Über ein
					Pop-up lässt sich die gewünschte Globale Vorlage auswählen.
					Die Smarty-Funktion zur Einbindung der Globalen Vorlage generiert 
					die adäquate Syntax und setzt diese an der Stelle des zuvor gesetzten
					Cursors ein.
				</para>
				
				<figure id="templating.global_templates.usage.reference_global_templates.pop_up">
					<title>Globale Vorlage mit Hilfsfunktion referenzieren</title>
					<graphic fileref="images/templating/global_templates/usage.reference_global_templates.pop_up.png"/>
				</figure>
				
			</sect3>
		</sect2>
	</sect1>
		
	<sect1 id="templating.global_files">
		<title>Globale Dateien</title>
		
		<sect2 id="templating.global_files.introduction">
			<title>Einführung</title>
			
			<para>
				Die Globalen Dateien dienen zu Verwaltung von binären
				Elementen, die zur Gestaltung von Vorlagen benötigt werden.
				Dazu gehören beispielsweise Bilder oder Flash-Videos. Wer
				dagegen Dateien mit einem textuellen Inhalt verwalten will,
				muss auf die Globalen Vorlagen (siehe <xref
				linkend="templating.global_templates"/>) zurückgreifen.
			</para>
			
			<para>
				Zur Verwaltung von Multimedia-Inhalten, die für die
				Seiteninhalte gedacht sind, muss der Media Manager verwendet
				werden (siehe <xref linkend="media.mediamanager"/>).
			</para>
		</sect2>
		
		<sect2 id="templating.global_files.manage_global_files">
			<title>Verwaltung</title>
			
			<para>
				Die Verwaltung der Globalen Dateien erfolgt im Bereich
				<guimenu>Vorlagen</guimenu> im Unterpunkt
				<guisubmenu>Globale Dateien</guisubmenu>. Die Übersicht listet
				die vorhandenen Globalen Dateien zusammen mit einer 
				vorhandenen Beschreibung und der Information, ob eine Datei
				verfügbar ist oder nicht. Dazu werden eine Reihe von
				Funktionen zur Bearbeitung von Globalen Dateien geboten:
			</para>
			
			<figure id="templating.global_files.manage_global_files.overview">
				<title>Übersicht über vorhandene Globale Dateien</title>
				<graphic fileref="images/templating/global_files/manage_global_files.overview.png"/>
			</figure>
			
			<variablelist>
				<varlistentry>
					<term><guimenuitem>Upload</guimenuitem></term>
					<listitem>
						<para>
							Ermöglicht das Hochladen einer Globalen Datei, 
							wobei die auf dem Server hinterlegte Datei durch
							die neue ersetzt wird. 
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Download</guimenuitem></term>
					<listitem>
						<para>
							Erlaubt den Download der Globalen Datei.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Bearbeiten</guimenuitem></term>
					<listitem>
						<para>
							Über die Schaltfläche <guibutton>Bearbeiten</guibutton>
							gelangt man zu einem Formular zum Bearbeiten der
							jeweiligen Globalen Datei.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Löschen</guimenuitem></term>
					<listitem>
						<para>
							Löscht die Globale Datei.
						</para>
						
						<warning>
							<para>
								Löschen Sie eine Globale Datei, bleiben
								allfällige Referenzen auf diese Datei
								in Vorlagen unberührt!
							</para>
						</warning>
					</listitem>
				</varlistentry>
			</variablelist>
			
			<para>
				Sobald man auf den Link <guibutton>Neu anlegen</guibutton> klickt,
				kommt man zum Formular zum Hinzufügen einer neuen Globalen 
				Datei.
			</para>
			
			<figure id="templating.global_files.manage_global_files.add_new">
				<title>Globale Datei hinzufügen</title>
				<graphic fileref="images/templating/global_files/manage_global_files.add_new.png"/>
			</figure>
			
			<variablelist>
				<varlistentry>
					<term><guimenuitem>Datei</guimenuitem></term>
					<listitem>
						<para>
							Datei, die als Globale Datei ins System importiert
							werden soll. Sollte eine Datei mit einem
							identischen Namen hochgeladen werden, wird das
							Original <emphasis>nicht</emphasis> überschrieben.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><guimenuitem>Beschreibung</guimenuitem></term>
					<listitem>
						<para>
							(Optionaler) Beschreibungstext der Globalen 
							Datei.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		
		<sect2 id="templating.global_files.usage">
			<title>Anwendung</title>
			
			<para>
				Globale Dateien können sowohl in Globalen Vorlagen als auch in
				normalen Vorlagen referenziert werden. Die Referenzen werden
				in Form einer Smarty-Funktion eingesetzt, welche bei der
				Verarbeitung der Seite durch den realen Pfad zur Globalen
				Datei ersetzt wird. So wird aus
			</para>

			<programlisting><![CDATA[
{global_file name="logo.png"}
]]></programlisting>

			<para>
				beispielsweise der Pfad
			</para>

			<programlisting><![CDATA[
/pfad/der/installation/files/global_files/fc038feddb4f211e7974f0408f1dc162a4015460_logo.png
]]></programlisting>

			<para>
				Die Globalen Dateien können damit zum Beispiel als src- oder
				href-Attribut in verschiedenen HTML-Tags verwendet
				werden. Beispiel:
			</para>

			<programlisting><![CDATA[
<img id="logo" src="{global_file name="logo.png"}"
	alt="Logo Beispielfirma" />
]]></programlisting>

			<para>
				wird zu
			</para>

			<programlisting><![CDATA[
<img id="logo" src="/pfad/der/installation/files/global_files/fc038feddb4f211e7974f0408f1dc162a4015460_logo.png"
	alt="Logo Beispielfirma" />
]]></programlisting>

			<para>
				Die Smarty-Funktion zur Einbindung der Globalen Dateien
				muss man nicht selber schreiben, sondern kann man sich von
				einer Hilfsfunktion einsetzen lassen, die jeweils über den
				Eingabefeldern für die Vorlagen-Inhalte sitzt. Über ein
				Pop-up lässt sich die gewünschte Globale Datei auswählen.
				Die Smarty-Funktion zur Einbindung der Globalen Datei generiert
				die adäquate Syntax und setzt diese an der Stelle des zuvor gesetzten Cursors ein.
			</para>

			<figure id="templating.global_files.usage.reference_global_files.pop_up">
				<title>Globale Datei mit Hilfsfunktion referenzieren</title>
				<graphic fileref="images/templating/global_files/usage.reference_global_files.pop_up.png"/>
			</figure>
		</sect2>
	</sect1>
	
</chapter>